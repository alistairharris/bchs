<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>ksql//BCHS: process-separated SQLite</title>
		<link href="https://fonts.googleapis.com/css?family=Alegreya+Sans:200,300,200italic,300italic,500" rel="stylesheet" />
		<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
		<link href="style.css" rel="stylesheet" />
		<link href="ksql.css" rel="stylesheet" />
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
		<link rel="manifest" href="/manifest.json" />
		<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
		<meta name="theme-color" content="#ffffff" />
	</head>
	<body>
		<section itemscope="itemscope" itemtype="http://schema.org/WebPage">
			<header>
				<img itemprop="image" src="logo-blue.png" alt="BCHS Logo" />
				<h1>
					<a href="index.html" itemprop="name">BCHS</a>
				</h1>
				<nav>
					<a href="start.html"><span>start</span></a>
					<a href="tools.html"><span>tools</span></a>
					<a href="easy.html"><span>example</span></a>
					<a href="https://github.com/kristapsdz/bchs"><i class="fa fa-github"></i></a>
				</nav>
			</header>
			<article>
				<p class="tldr">
					<b>tl;dr</b>: the new split-process mode of <a href="https://kristaps.bsd.lv/ksql">ksql(3)</a> 
					constrains SQLite database operations to a child process, allowing the caller to <a
						href="https://man.openbsd.org/pledge.2">pledge(2)</a> better.
				</p>
				<p>
					I use <a href="https://sqlite.org">SQLite</a> a lot because managing a <q>big</q> database is a pain in
					the ass and my database needs are few.  Most of these uses are within small to medium-size web
					applications, so security (see <q>web</q>) is very important.
				</p>
				<p>
					One thing that bothers me security-wise about using SQLite is that it opens files during run-time.
					The main database might be opened immediately, but auxiliary files (<a
						href="https://sqlite.org/tempfiles.html">WAL, journal, etc.</a>) might be opened at any time.
					And according to the documentation, even the names and locations of these files aren't fixed
					(although <a href="https://github.com/bapt">bapt</a> has implemented a 
					<a href="https://github.com/freebsd/pkg/blob/master/libpkg/pkgdb.c">clever solution</a> for keeping
					files under the same root).
					Take a <a href="https://sqlite.org/wal.html">WAL mode</a> example&#8230;
				</p>
				<pre>% ls -l /var/www/data/
total 604
-rw-rw-rw-  1 root  daemon  220160 Dec 12  2016 cgi.db
-rw-rw-rw-  1 www   daemon   32768 Dec 12  2016 cgi.db-shm
-rw-rw-rw-  1 www   daemon   30424 May  3  2016 cgi.db-wal</pre>
				<p>
					So what's the problem?
					The run-time files prevents me from using <a href="pledge.html">pledge</a> intelligently within my
					applications, as I must accommodate for opening (and processing) new files.
					In most web applications, <code>stdio</code> is the only promise that's required by the CGI bits.
					(CGI and FastCGI communicate over pre-opened descriptors.)
					But because of SQLite, I need to let in a whole lot more.
				</p>
				<article data-sblg-article="1" data-sblg-permlink="0"></article>
				<p>
					Not good!
					It's true the new process can't be launched, nor can sockets be open, but the database (and all other
					databases in the web server's root) are open for exploitation.
					Surely we can do better?
				</p>
				<p>
					A few years ago, I wrote <a href="https://kristaps.bsd.lv/ksql">ksql(3)</a> to simplify the SQLite API
					and mandate that database access errors should cause program termination, and program termination should
					safely close the database.
					It occurred to me that I could extend the system to use the same model as in <a
						href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a>: constraining the vulnerable database access in
					a child process.
					Something like&#8230;
				</p>
				<article data-sblg-article="1" data-sblg-permlink="0"></article>
				<p>
					This way, a constrained child process would manage the database.
					The master process, enacting my web application's <q>business logic</q>, would be completely sandboxed
					and unable to access the database except over a communication socket.
				</p>
				<p>
					Since ksql(3) wraps a small subset over the <a href="https://sqlite.org/capi3ref.html">SQLite C API</a>,
					it's manageable to enable each function individually.
					Only about 30 functions need to be fitted with split-process bits.
				</p>
				<figure>
					<img src="ksql-fig3.svg" alt="Interprocess communication" />
					<figcaption>
						The database is securely managed by a child process and communicates with the main web
						application process over sockets.
					</figcaption>
				</figure>
				<p>
					For the time being, the protocol is an overly simple (read: slow and inefficient) one: open a
					non-blocking socket pair, fork, pass the pair to the child and parent.
					The child then opens and works with the database with a <a
						href="https://man.openbsd.org/pledge.2">pledge(2)</a> set for file access.
				</p>
				<p>
					Following invocation, the parent caller usually will pledge for <code>stdio</code> and whatever else is
					required by the application.
				</p>
				<p>
					All in all, this roughly doubled the code-base size, but there's a lot that can be cut down.
					See it for yourself in <a href="https://github.com/kristapsdz/ksql/blob/VERSION_0_1_0/ksql.c">ksql.c</a>
					(available as of the <b>0.1.0</b> release).
					The only bits needed to enable split-process mode are calling <a
						href="https://kristaps.bsd.lv/ksql/ksql_alloc_child.3.html">ksql_alloc_child(3)</a> instead of
					<a href="https://kristaps.bsd.lv/ksql/ksql_alloc.3.html">ksql_alloc(3)</a> on initialisation.
				</p>
				<p>
					For example, the following simple application opens the database, then sandboxes itself.
					Note that the ksql(3) functions aren't checked for errors since the default behaviour is to exit on
					database errors.
					(Technically the calls to <a href="https://kristaps.bsd.lv/ksql/ksql_close.3.html">ksql_close(3)</a> and
					<a href="https://kristaps.bsd.lv/ksql/ksql_free.3.html">ksql_free(3)</a> are superfluous, but let's be
					tidy.)
				</p>
				<article data-sblg-article="1" data-sblg-permlink="0"></article>
				<p>
					In a web application that combines <a href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a> and <a
						href="https://kristaps.bsd.lv/ksql">ksql(3)</a>, both the parsing of validation of data
					<i>and</i> database import and export are all performed separately from the main CGI script.
					So all <q>vulnerable</q> operations (touching network, touching files) of such applications are now
					accomplished in child processes.
				</p>
				<p>
					I've already added the functionality to <a href="https://kristaps.bsd.lv/kwebapp">kwebapp(1)</a>
					(discussed <a href="kwebapp.html">here</a>) as of 0.2.8 to make this even easier to use.
				</p>
				<p>
					What can be improved?
					A lot.
					For starters, the protocol can be significantly (make that <q><i>significantly</i></q>) improved.
					Right now, it has a lot of reads and writes that can be consolidated into one: a header frame with most
					data, followed by additional data in the event of strings.
					In fact, any request can be limited to two transmissions: a header frame and a data frame.
					Most requests will only have the header.
					(Those with string or blob values will need the extra frame.)
				</p>
			</article>
			<footer>
				<div>
					<a href="https://creativecommons.org/licenses/by/4.0/"><i class="fa fa-creative-commons"></i></a> 
					<a rel="author" href="https://kristaps.bsd.lv">Kristaps Dzonsons</a>
				</div>
			</footer>
		</section>
	</body>
</html>

